name: Maven build

on:
  workflow_call:
    inputs:
      workdir:
        required: true
        type: string
    secrets:
      token:
        required: true

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        ref: ${{ github.ref }}
        distribution: adopt
        java-version: 11
        server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Setup branch and GPG public key 
      run: |
        # Strip git ref prefix from version
        echo "::set-env name=BRANCH_NAME::$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')"
        echo ${{ env.BRANCH_NAME }}
        echo "::set-env name=GPG_TTY::$(tty)"
        echo ${{ env.GPG_TTY }}
        sudo apt-get --yes install gnupg2
        gpg2 --import ./.github/keys/mosipgpgkey_pub.gpg 
        gpg2 --quiet --batch --passphrase=${{secrets.gpg_secret}}  --allow-secret-key-import --import ./.github/keys/mosipgpgkey_sec.gpg 
     
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-${{ env.BRANCH_NAME }}
          
    - name: Install xmlstartlet
      run: |
        sudo apt-get update
        sudo apt-get install xmlstarlet
    
    - name: Setup the settings file for ossrh server
      run: echo "<settings> <servers>  <server>  <id>ossrh</id>    <username>${{secrets.ossrh_user}}</username> <password>${{secrets.ossrh_secret}}</password> </server> </servers> <profiles> <profile>     <id>ossrh</id> <activation> <activeByDefault>true</activeByDefault> </activation>  <properties> <gpg.executable>gpg2</gpg.executable> <gpg.passphrase>${{secrets.gpg_secret}}</gpg.passphrase> </properties> </profile> <profile> <id>allow-snapshots</id>       <activation><activeByDefault>true</activeByDefault></activation> <repositories> <repository>        <id>snapshots-repo</id> <url>https://oss.sonatype.org/content/repositories/snapshots</url> <releases><enabled>false</enabled></releases> <snapshots><enabled>true</enabled></snapshots> </repository>  <repository>         <id>releases-repo</id>  <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>         <releases><enabled>true</enabled></releases>         <snapshots><enabled>false</enabled></snapshots> </repository> </repositories>  </profile> <profile> <id>sonar</id> <properties>  <sonar.sources>.</sonar.sources> <sonar.host.url>https://sonarcloud.io</sonar.host.url>  </properties> <activation> <activeByDefault>false</activeByDefault> </activation> </profile> </profiles> </settings>" > $GITHUB_WORKSPACE/settings.xml
    
    - name: Build check for MOSIP License
      run: cd ${{ inputs.workdir }} && xmlstarlet sel -N s="http://maven.apache.org/POM/4.0.0" -t -v "//s:project/s:licenses[1]/s:license/s:name" -nl pom.xml | grep -q "MPL 2.0"

    - name: Build check for developer
      run: cd ${{ inputs.workdir }} && xmlstarlet sel -N s="http://maven.apache.org/POM/4.0.0" -t -v "//s:project/s:developers[1]/s:developer/s:name" -nl pom.xml | grep -icq "Mosip"

    - name: Build check for commit plugin
      run: cd ${{ inputs.workdir }} && xmlstarlet sel -N s="http://maven.apache.org/POM/4.0.0" -t -v "//s:project/s:build/s:plugins/s:plugin[s:groupId='pl.project13.maven']/s:artifactId" -nl pom.xml | grep -q "git-commit-id-plugin"

    - name: Build check for sign plugin
      run: cd ${{ inputs.workdir }} && xmlstarlet sel -N s="http://maven.apache.org/POM/4.0.0" -t -v "//s:project/s:build/s:plugins/s:plugin[s:groupId='pl.project13.maven']/s:artifactId" -nl pom.xml | grep -q "maven-gpg-plugin"

    - name: Build with Maven
      run: cd ${{ inputs.workdir }} && mvn -B package --file pom.xml -s $GITHUB_WORKSPACE/settings.xml
         
    - name: Ready the springboot artifacts
      if: ${{ !contains(github.ref, 'master') || !contains(github.ref, 'main') }}
      run: find -name '*.jar' -executable -type f  -exec zip release.zip {} +

    - name: Upload the springboot jars 
      if: ${{ !contains(github.ref, 'master') || !contains(github.ref, 'main') }}
      uses: actions/upload-artifact@v1
      with:
        name: release
        path: ./release.zip

  publish_to_nexus:
    if: ${{ !contains(github.ref, 'master') || !contains(github.ref, 'main') }}
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        ref: ${{ github.ref }}
        distribution: adopt
        java-version: 11
        server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file
        
    - name: Setup branch and env 
      run: |
        # Strip git ref prefix from version
        echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
        echo "GPG_TTY=$(tty)" >> $GITHUB_ENV
        
    - name: Setup branch and GPG public key 
      run: |
        # Strip git ref prefix from version
        echo ${{ env.BRANCH_NAME }}
        echo ${{ env.GPG_TTY }}
        sudo apt-get --yes install gnupg2
        gpg2 --import ./.github/keys/mosipgpgkey_pub.gpg 
        gpg2 --quiet --batch --passphrase=${{secrets.gpg_secret}}  --allow-secret-key-import --import ./.github/keys/mosipgpgkey_sec.gpg 
     
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-${{ env.BRANCH_NAME }}
          
    - name: Setup the settings file for ossrh server
      run: echo "<settings>   <servers>      <server>        <id>ossrh</id>          <username>${{secrets.ossrh_user}}</username>          <password>${{secrets.ossrh_secret}}</password>       </server>    </servers>    <profiles>       <profile>          <id>ossrh</id>          <activation>             <activeByDefault>true</activeByDefault>          </activation>          <properties>             <gpg.executable>gpg2</gpg.executable>             <gpg.passphrase>${{secrets.gpg_secret}}</gpg.passphrase>          </properties>       </profile>       <profile>          <id>allow-snapshots</id>          <activation>             <activeByDefault>true</activeByDefault>          </activation>          <repositories>             <repository>                <id>snapshots-repo</id>                <url>https://oss.sonatype.org/content/repositories/snapshots</url>                <releases>                   <enabled>false</enabled>                </releases>                <snapshots>                   <enabled>true</enabled>                </snapshots>             </repository>             <repository>                <id>releases-repo</id>                <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>                <releases>                   <enabled>true</enabled>                </releases>                <snapshots>                   <enabled>false</enabled>                </snapshots>             </repository>             <repository>                <id>danubetech-maven-public</id>                <url>https://repo.danubetech.com/repository/maven-public</url>             </repository>          </repositories>       </profile>       <profile>          <id>sonar</id>          <properties>             <sonar.sources>.</sonar.sources>             <sonar.host.url>https://sonarcloud.io</sonar.host.url>          </properties>          <activation>             <activeByDefault>false</activeByDefault>          </activation>       </profile>    </profiles> </settings>" > $GITHUB_WORKSPACE/settings.xml
      
    - name: Build with Maven
      run: cd ${{ inputs.workdir }} && mvn -B package --file pom.xml -s $GITHUB_WORKSPACE/settings.xml
        
    - name: Publish the maven package
      run: |
        cd ${{ inputs.workdir }} && mvn deploy  -DaltDeploymentRepository=ossrh::default::${{ secrets.RELEASE_URL }} -s $GITHUB_WORKSPACE/settings.xml -f pom.xml
      env:
        GITHUB_TOKEN: ${{secrets.RELEASE_TOKEN}}
        GPG_TTY: $(tty)

    - uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,workflow,job # selectable (default: repo,message)
      env:
         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEVOPS_WEBHOOK }} # required
      if: failure() # Pick up events even if the job fails or is canceled.   
  sonar_analysis:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          ref: ${{ github.ref }}
          distribution: adopt
          java-version: 11
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Setup branch and env
        run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
          echo "GPG_TTY=$(tty)" >> $GITHUB_ENV
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ env.BRANCH_NAME }}
      
      - name: Setup the settings file for ossrh server
        run: echo "<settings>   <servers>      <server>        <id>ossrh</id>          <username>${{secrets.ossrh_user}}</username>          <password>${{secrets.ossrh_secret}}</password>       </server>    </servers>    <profiles>       <profile>          <id>ossrh</id>          <activation>             <activeByDefault>true</activeByDefault>          </activation>          <properties>             <gpg.executable>gpg2</gpg.executable>             <gpg.passphrase>${{secrets.gpg_secret}}</gpg.passphrase>          </properties>       </profile>       <profile>          <id>allow-snapshots</id>          <activation>             <activeByDefault>true</activeByDefault>          </activation>          <repositories>             <repository>                <id>snapshots-repo</id>                <url>https://oss.sonatype.org/content/repositories/snapshots</url>                <releases>                   <enabled>false</enabled>                </releases>                <snapshots>                   <enabled>true</enabled>                </snapshots>             </repository>             <repository>                <id>releases-repo</id>                <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>                <releases>                   <enabled>true</enabled>                </releases>                <snapshots>                   <enabled>false</enabled>                </snapshots>             </repository>             <repository>                <id>danubetech-maven-public</id>                <url>https://repo.danubetech.com/repository/maven-public</url>             </repository>          </repositories>       </profile>       <profile>          <id>sonar</id>          <properties>             <sonar.sources>.</sonar.sources>             <sonar.host.url>https://sonarcloud.io</sonar.host.url>          </properties>          <activation>             <activeByDefault>false</activeByDefault>          </activation>       </profile>    </profiles> </settings>" > $GITHUB_WORKSPACE/settings.xml
    
      - name: Build with Maven
        run: cd id-repository && mvn -B -DskipTests -Dgpg.skip package --file pom.xml -s $GITHUB_WORKSPACE/settings.xml

      - name: Analyze with SonarCloud
        run: |
          cd ${{ inputs.workdir }} &&  mvn -B -Dgpg.skip verify sonar:sonar -Dsonar.projectKey=mosip_${{ github.event.repository.name }} -Dsonar.organization=${{ secrets.ORG_KEY }} -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }} --file pom.xml -s $GITHUB_WORKSPACE/settings.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,workflow,job # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEVOPS_WEBHOOK }} # required
        if: failure() # Pick up events even if the job fails or is canceled.

  find-dockers:
    runs-on: ubuntu-latest

    outputs:
      docker-matrix: ${{steps.set-matrix.outputs.find-dockers }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        shell: bash
        run: find . -type f -name Dockerfile
  
  build-dockers:
    runs-on: ubuntu-latest
    env:
      NAMESPACE: ${{secrets. dev_namespace_docker_hub}}
    needs: [find-dockers]
    strategy:
      fail-fast: false
      matrix:
        include: ${{needs.find-dockers.outputs.docker-matrix}}
    name: "docker_${{ needs.find-dockers.outputs.docker-matrix }}"    
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: release
          path: ./
      
      - name: Setup branch name 
        run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
      - name: Get version info from pom
        id: getPomVersion
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: ./${{ env.SERVICE_LOCATION }}/pom.xml 
          xpath: /*[local-name()="project"]/*[local-name()="version"] 
      
      - name: Unzip and extract 
        run: unzip -uj "release.zip" "${{ env.SERVICE_LOCATION }}/target/*" -d "./${{ env.SERVICE_LOCATION }}/target"

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Build image
        run: |
          cd "./${{env.SERVICE_LOCATION}}"
          docker build . --build-arg SOURCE=mosip --build-arg COMMIT_HASH=$(git rev-parse HEAD) --build-arg COMMIT_ID=$(git rev-parse --short HEAD) --build-arg BUILD_TIME=${{steps.date.outputs.date}} --file Dockerfile --tag ${{ env.SERVICE_NAME }}
      - name: Log into registry
        run: echo "${{secrets.release_docker_hub}}" | docker login -u ${{secrets.actor_docker_hub}} --password-stdin
        
      - name: Push image
        run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "push version ${{steps.getPomVersion.outputs.info}}"
          if [[ $BRANCH_NAME == master ]]; then
            VERSION=latest
          else
            VERSION=$BRANCH_NAME
          fi
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,workflow,job # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEVOPS_WEBHOOK }} # required
        if: failure() # Pick up events even if the job fails or is canceled. 
        


          